= Personal Folder File (PFF) file format specification
Analysis of the PFF format

:toc:
:toclevels: 4

:numbered!:
[abstract]
== Summary
PFF is short for Personal Folder File and is mainly used by Microsoft Outlook
to store e-mails, appointments, contacts, tasks, etc. This specification is
based on the work by libpst `[SMITH02]` started in 2002 and was enhanced by
analyzing test data in 2008 and 2009. In 2010 it was synced with Microsoft's
official PST specification `[MS-PST]`.

This document is intended as a working document for the Personal Folder File
format specification. Which should allow existing Open Source forensic tooling
to be able to process this file type.

[preface]
== Document information
[cols="1,5"]
|===
| Author(s): | Joachim Metz <joachim.metz@gmail.com>
| Abstract: | This document contains information about the Personal Folder File format.
| Classification: | Public
| Keywords: | PFF, Personal Folder File, OFF, Offline Folder File, PAB, Personal Address Book, PST, Personal Storage Table, OST, Outlook Storage Table
|===

[preface]
== License
....
Copyright (C) 2008-2018, Joachim Metz <joachim.metz@gmail.com>.
Permission is granted to copy, distribute and/or modify this document under the
terms of the GNU Free Documentation License, Version 1.3 or any later version
published by the Free Software Foundation; with no Invariant Sections, no
Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included
in the section entitled "GNU Free Documentation License".
....

[preface]
== Revision history
[cols="1,1,1,5",options="header"]
|===
| Version | Author | Date | Comments
| 0.0.1 | J.B. Metz | June 2008 | Initial version based on earlier notes.
| 0.0.2 | J.B. Metz | June 2008 | Added information about LZFu compression and arrays.
| 0.0.3 | J.B. Metz | July 2008 | Added information about allocation tables.
| 0.0.4 | J.B. Metz | October 2008 | Updated for initial release.
| 0.0.5 | J.B. Metz | October 2008 | Added reference about RTF compression.
| 0.0.6 | J.B. Metz | October 2008 | Addition about attachments of type embedded object.
| 0.0.7 | J.B. Metz | October 2008 | Addition about 0x85 0x85 index node type.
| 0.0.8 | J.B. Metz | October 2008 | Added information about descriptor list type.
| 0.0.9 | J.B. Metz | November 2008 | Added information about name-to-id map.
| 0.0.10 | J.B. Metz | December 2008 | Additional information about the header.
| 0.0.11 | J.B. Metz | December 2008 | Additional information about the header and item values types (property types).
| 0.0.12 | J.B. Metz | December 2008 | Additional information about item types (property names/identifiers) and the name-to-id map.
| 0.0.13 | J.B. Metz | December 2008 | Additional information about the file header and the item types.
| 0.0.14 | J.B. Metz | December 2008 | Additional information about the item types.
| 0.0.15 | J.B. Metz | January 2009 | Additional information about the allocation full maps.
| 0.0.16 | J.B. Metz | January 2009 | Additional information about HTML e-mail body type.
| 0.0.17 | J.B. Metz | January 2009 | Additional information about name-to-id map.
| 0.0.18 | J.B. Metz | January 2009 | Moved MAPI definitions to separate document.
| 0.0.19 | J.B. Metz | March 2009 | Added information encountered by C. Byington of the libpst project. +
Renamed the local descriptor list into the local descriptors. +
Added information about the build-in Public strings class in the name-to-id map.
| 0.0.20 | J.B. Metz | March 2009 | Additional information and corrections.
| 0.0.21 | J.B. Metz | May 2009 | Update for recipient types based on patch by K. Mazur
| 0.0.22 | J.B. Metz | May 2009 | Update for attachment rendering position from finding by K. Mazur. +
Changed local descriptors node level into node type.
| 0.0.23 | J.B. Metz | June 2009 | Update for non UTF-16 strings in name-to-id map. +
Clean up of the PFF items, mainly provided for in the MAPI documentation. +
First table index offset of an Outlook 2007 SP2 ost file is out of the ordinary.
| 0.0.24 | J.B. Metz | June 2009 | Added information about the b5 table header table entries level. +
Added information about the local descriptors type (level of indirection).
| 0.0.25 | J.B. Metz | June 2009 | Added information about 6c and 8c table. +
Added information about sub folders item.
| 0.0.26 | J.B. Metz | July 2009 | Additional information and corrections. +
Added information about sub messages item. +
Added missing information about 64-bit array type
| 0.0.27 | J.B. Metz | September 2009 | Added information about none encrypted pst files with encrypted data.
| 0.0.28 | J.B. Metz | September 2009 | Added information about the array (indirection) level.
| 0.0.29 | J.B. Metz | September 2009 | Added information about the bc table (indirection) level.
| 0.0.30 | J.B. Metz | January 2010 | Small changes
| 0.0.31 | J.B. Metz | January 2010 | Additional information based on [MS-PST].
| 0.0.32 | J.B. Metz | March 2010 | Corrected information about table offset index entries.
| 0.0.33 | J.B. Metz | April 2010 | Updated remarks.
| 0.0.34 | J.B. Metz | April 2010 | Added codepage 1200 scenario.
| 0.0.35 | J.B. Metz | June 2010 | Email change
| 0.0.36 | J.B. Metz | July 2010 | Changes to local descriptors
| 0.0.37 | J.B. Metz | August 2010 | Changed table entry to record entry, and table entry definition to column definition for clarity.
| 0.0.38 | J.B. Metz | January 2010 | License version update
| 0.0.39 | J.B. Metz | July 2012 | Email change
| 0.0.40 | J.B. Metz | August 2012 | Updated references.
| 0.0.41 | J.B. Metz | February 2013 | Small changes.
| 0.0.42 | J.B. Metz | February 2013 | Changes for Outlook 2013 OST (64-bit 4k page) file with thanks to S. Gurjar.
| 0.0.43 | J.B. Metz | July 2013 | Additional information about 64-bit 4k page format.
| 0.0.44 | J.B. Metz | August 2013 | Additional information about corruption scenarios with thanks to J.M. Cabo.
| 0.0.45 | J.B. Metz | August 2013 | Additional information about Outlook 2013 OST (64-bit 4k page) format with thanks to I. Rogov.
| 0.0.46 | J.B. Metz | August 2013 | Additional information about Outlook 2013 OST (64-bit 4k page) format.
| 0.0.47 | J.B. Metz | July 2018 | Switched to asciidoc format.
|===

:numbered:
== Overview

The PFF (Personal Folder File) and OFF (Offline Folder File) format is used to
store Microsoft Outlook e-mails, appointments and contacts. The OST (Offline
Storage Table), PAB (Personal Address Book) and PST (Personal Storage Table)
file format consist of the PFF format. A PFF consist of the following
distinguishable elements:

* file header
* file header data
* index branch node
* index leaf node
* (file) offset index
* (item) descriptor index
* local descriptors
* item table type

[cols="1,5",options="header"]
|===
| Characteristics | Description
| Byte order | little-endian
| Date and time values | FILETIME in UTC
| Character strings | ASCII strings are Single Byte Character (SBC) or Multi Byte Character (MBC) string stored with a codepage. Sometimes referred to as ANSI string representation. +
Though technically maybe incorrect, this document will use term (extended) ASCII string. +
Unicode strings are stored in UTF-16 little-endian without the byte order mark (BOM).
|===

Certain elements of the PFF format are related to the Microsoft (Office)
Outlook Messaging API (MAPI).

`[MS-PST]` defines two types of the PFF:

* the 32-bit ANSI format
* the 64-bit Unicode format

A third variant was discovered in an Outlook 2013 OST file namely:

* the 64-bit Unicode format with 4k (4096 bytes) pages.

=== Test version

Files created by the following version of programs were used to test the
information within this document:

* Microsoft Outlook 2000
* Microsoft Outlook 2003
* Microsoft Outlook 2007
* Microsoft Outlook 2010
* Microsoft Outlook 2013
* Exmerge
* Scanpst

== File header

The file header common to both the 32-bit and 64-bit PFF format consists of 24
bytes and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | "\x21\x42\x44\x4e" (!BDN) | The signature (magic identifier)
| 4 | 4 | | A weak CRC32 of the following 471 bytes +
In 64-bit files this CRC seems to be ignored because of the CRC at the end of the file header data at offset 524.
| 8 | 2 | | The content type (client signature) +
See section: <<content_types,Content types>>
| 10 | 2 | | The data version (NDB version) +
NDB is short for node database +
See section: <<format_versions,Format versions>>
| 12 | 2 | | Content version (Client version) +
[yellow-background]*Unknown use*
| 14 | 1 | 0x01 | Creation Platform +
[yellow-background]*Unknown use* +
must be 0x01 according to `[MS-PST]` +
Seen 0x02 found in scanpst recovered pst
| 15 | 1 | 0x01 | Access Platform +
[yellow-background]*Unknown use* +
must be 0x01 according to `[MS-PST]` +
Seen 0x02 found in scanpst recovered pst
| 16 | 4 | 0 | [yellow-background]*Unknown (dwOpenDBID)* +
Reserved, sometimes contains: 0x40 0x00 0x00 0x00 (unclean unmount?)
| 20 | 4 | 0 | [yellow-background]*Unknown (dwOpenClaimID)* +
Reserved, (mostly empty) (unclean unmount?)
|===

=== [[content_types]]Content types

[cols="1,1,5",options="header"]
|===
| Value | Identifier | Description
| "\x41\x42" (AB) | | Used for PAB files
| "\x53\x4d" (SM) | | Used for PST files
| "\x53\x4f" (SO) | | Used for OST files
|===

=== [[format_types]]Format types

[cols="1,1,5",options="header"]
|===
| Value | Identifier | Description
| "\x0e\x00" | | 32-bit ANSI format
| "\x0f\x00" | | 32-bit ANSI format
| "\x15\x00" | | 64-bit Unicode format (by Visual Recovery)
| "\x17\x00" | | 64-bit Unicode format
| "\x24\x00" | | 64-bit Unicode format with 4k
|===

=== The 32-bit header data

The 32-bit header data is 488 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 24 | 4 | | Next (available) index pointer
| 28 | 4 | | Next (available) index back pointer +
[yellow-background]*In more recent pst/ost files used for the density list at offset 0x4200*
| 32 | 4 | | Seed value +
Unique value for the CRC calculation, which changes for consecutive created files
| 36 | 128 (32 x 4) | | Descriptor index high water marks (NID high-water marks)
4+| _Part of the header data to which `[MS-PST]` refers to as the root_
| 164 | 4 | 0 | [yellow-background]*Unknown (Reserved)*
| 168 | 4 | | Total file size
| 172 | 4 | | Last data allocation table offset +
The file offset to the last data allocation table
| 176 | 4 | | Total available data size
| 180 | 4 | | Total available page size
| 184 | 4 | | The descriptor index back pointer +
the value that should appear in the parent offset of the root node of the descriptor index b-tree
| 188 | 4 | | The descriptor index file offset +
File offset of the the of the descriptor index b-tree
| 192 | 4 | | The (file) offset index back pointer +
the value that should appear in the parent offset of the root node of the (file) offset index b-tree
| 196 | 4 | | The (file) offset index file offset +
File offset of the the of the (file) offset index b-tree
| 200 | 1 | | Allocation table validation type +
See section: <<allocation_table_validation_types,Allocation table validation types>>
| 201 | 1 | 0 | [yellow-background]*Unknown (Reserved)*
| 202 | 2 | 0 | [yellow-background]*Unknown (Reserved)*
4+| _End of the root_
| 204 | 128 | | The initial data free map
| 332 | 128 | | The initial page free map
| 460 | 1 | 0x80 | Senitinal
| 461 | 1 | | Encryption type +
See section: <<encryption_types,Encryption types>>
| 462 | 2 | 0 | [yellow-background]*Unknown (Reserved)* +
[yellow-background]*In older formats (rgbReserved Index) which is 17 bytes of size*
| 464 | 8 | 0 | [yellow-background]*Unknown (Reserved)*
| 472 | 4 | 0 | [yellow-background]*Unknown (Reserved)*
| 476 | 3 | 0 | [yellow-background]*Unknown (Reserved)*
| 479 | 1 | 0 | [yellow-background]*Unknown (Reserved)*
| 480 | 32 | 0 | [yellow-background]*Unknown (Reserved)*
|===

Data after file header data probably extended data for AMap

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 512 | 4 | | [yellow-background]*Unknown value* +
[yellow-background]*Changes consecutive created pst files*
| 516 | 4 | | [yellow-background]*Unknown value* +
[yellow-background]*Changes consecutive created pst files*
| 520 | 4 | | [yellow-background]*Unknown value* +
[yellow-background]*Does not change in consecutive created pst files*
| 524 | 4 | | [yellow-background]*Unknown value* +
[yellow-background]*Changes consecutive created pst files*
| 528 | 16880 | | [yellow-background]*Empty values*
|===

=== The 64-bit header data

The 64-bit header data is 540 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 24 | 8 | | [yellow-background]*Unused (bidUnused)* +
Sometimes contains: 0x04 0x00 0x00 0x00 0x01 0x00 0x00 0x00
| 32 | 8 | | Next (available) index back pointer +
In more recent pst/ost files used for the density list at offset 0x4200
| 40 | 4 | | Seed value +
Unique value for the CRC calculation, which changes for consecutive created files
| 44 | 128 (32 x 4) | | Descriptor index high water marks (NID high-water marks)
| 172 | 8 | 0 | [yellow-background]*Unknown (qwAlign)* +
[yellow-background]*Unused*
4+| _Part of the header data to which `[MS-PST]` refers to as the root_
| 180 | 4 | 0 | [yellow-background]*Unknown (cOrphans)* +
[yellow-background]*Reserved*
| 184 | 8 | | Total file size
| 192 | 8 | | Last data allocation table offset +
The file offset to the last data allocation table
| 200 | 8 | | Total available data size
| 208 | 8 | | Total available page size
| 216 | 8 | | The descriptor index back pointer +
The value that should appear in the parent offset of the root node of the descriptor index b-tree
| 224 | 8 | | The descriptor index file offset +
File offset of the the of the descriptor index b-tree
| 232 | 8 | | The (file) offset index back pointer +
The value that should appear in the parent offset of the root node of the (file) offset index b-tree
| 240 | 8 | | The (file) offset index file offset +
File offset of the the of the (file) offset index b-tree
| 248 | 1 | | Allocation table validation type +
See section: <<allocation_table_validation_types,Allocation table validation types>>
| 249 | 1 | 0 | [yellow-background]*Unknown (bARVec)* +
[yellow-background]*Reserved*
| 250 | 2 | 0 | [yellow-background]*Unknown (cARVec)* +
[yellow-background]*Reserved*
4+| _End of the root_
| 252 | 4 | 0 | [yellow-background]*Unknown (dwAlign)* +
Alignment data according to `[MS-PST]`
| 256 | 128 | 0xff | The initial data free map +
According to `[MS-PST]` deprecated
| 384 | 128 | 0xff | The initial free page map +
According to `[MS-PST]` deprecated
| 512 | 1 | 0x80 | Senitinal
| 513 | 1 | | Encryption type +
See section: <<encryption_types,Encryption types>>
| 514 | 2 | 0 | [yellow-background]*Unknown (bReserved)* +
[yellow-background]*Reserved*
| 516 | 8 | | Next (available) index pointer
| 524 | 4 | | A weak CRC32 of the previous 516 bytes
| 528 | 3 | 0 | [yellow-background]*Unknown (rgbVersionEncoded)* +
[yellow-background]*Reserved*
| 531 | 1 | 0 | [yellow-background]*Unknown (bLockSemaphore)* +
[yellow-background]*Reserved*
| 532 | 32 | 0 | [yellow-background]*Unknown (rgbLock)* +
[yellow-background]*Reserved*
|===

Data after file header data probably extended data for AMap

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 538 | 8 | | [yellow-background]*Unknown value*
| 546 | 8 | | [yellow-background]*Unknown value*
| 552 | ... | |
|===

=== [[allocation_table_validation_types]]Allocation table validation types

[cols="1,1,5",options="header"]
|===
| Value | Identifier | Description
| 0x00 | INVALID_AMAP | One or more allocation tables are invalid
| 0x01 | VALID_AMAP1 | All allocation tables are valid +
According to `[MS-PST]` this value is deprecated
| 0x02 | VALID_AMAP2 | All allocation tables are valid
|===

=== Descriptor index high water marks

....
Unknown use
NID => Node ID ? Seems to be the equivalent of the items identifiers
type=n is the number in the array

Under high-water mark, any object less than the user's security level can be
opened, but the object is relabeled to reflect the highest security level
currently open. Hence the name.
....

==== Descriptor index high water mark type

[cols="1,1,5",options="header"]
|===
| Value | Identifier | Description
| 0x00000400 | NID_TYPE_NORMAL_FOLDER | Folder or any other type
| 0x00004000 | NID_TYPE_SEARCH_FOLDER | Search folder
| 0x00008000 | NID_TYPE_ASSOC_MESSAGE | Associated content
| 0x00010000 | NID_TYPE_NORMAL_MESSAGE | Message
|===

=== [[encryption_types]]Encryption types

[cols="1,1,5",options="header"]
|===
| Value | Identifier | Description
| 0x00 | NDB_CRYPT_NONE | No encryption
| 0x01 | NDB_CRYPT_PERMUTE | Compressible encryption +
According to `[MS-PST]` this is encryption with 'permutation algorithm', which is a substitution cipher
| 0x02 | NDB_CRYPT_CYCLIC | High encryption +
According to `[MS-PST]` this is encryption with 'cyclic algorithm', which is similar to the 3 rotor Enigma cipher
|===

== Pages

`[MS-PST]` defines a common structure for the allocation table, the index
b-tree, the free map and the density list as the page.

=== The 32-bit page

The 32-bit page is 512 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 500 | | Page data
| 500 | 1 | | Page type +
See section: <<page_types,Page types>>
| 501 | 1 | | Copy of page type
| 502 | 2 | | Signature
| 504 | 4 | | The back pointer
| 508 | 4 | | A weak CRC32 of the 496 bytes of the table data
|===

=== The 64-bit page

The 64-bit page is 512 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 496 | | Page data
| 496 | 1 | | Page type +
See section: <<page_types,Page types>>
| 497 | 1 | | Copy of page type
| 498 | 2 | | Signature
| 500 | 4 | | A weak CRC32 of the 496 bytes of the table data
| 504 | 8 | | The back pointer
|===

=== The 64-bit 4k page

The 64-bit 4k page is 4096 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 496 | | Page data
| 4072 | 1 | | Page type +
See section: <<page_types,Page types>>
| 4073 | 1 | | Copy of page type
| 4074 | 2 | | Signature
| 4076 | 4 | | A weak CRC32 of the 4072 bytes of the table data
| 4080 | 8 | | The back pointer
| 4088 | 8 | | [yellow-background]*Unknown*
|===

=== [[page_types]]Page types

[cols="1,1,5",options="header"]
|===
| Value | Identifier | Description
| 0x80 | ptypeBBT | Offset index b-tree node
| 0x81 | ptypeNBT | Descriptor index b-tree node
| 0x82 | ptypeFMap | Free map
| 0x83 | ptypePMap | Page allocation table
| 0x84 | ptypeAMap | Data allocation table
| 0x85 | ptypeFPMap | Free page map
| 0x86 | ptypeDL | Density list
|===

== The allocation table

The PFF contains several allocation tables. These tables are used to describe 
what parts of the PFF are in use and free. 

=== The 32-bit allocation table

The 32-bit allocation is 512 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | [yellow-background]*Unknown (Padding)*
| 4 | 496 | | The allocation table data +
Each bit represents a certain number of bytes (block). A value of 1 means that the block is allocated, 0 if not
4+| _Footer 12 bytes of size_
| 500 | 1 | 0x83 +
0x84 | Page type +
See section: <<page_types,Page types>> and <<allocation_table_types,Allocation table types>>
| 501 | 1 | 0x83 +
0x84 | Copy of page type
| 502 | 2 | 0 | Signature +
According to `[MS-PST]` this should be empty
| 504 | 4 | | The back pointer +
The value contains the allocation table offset
| 508 | 4 | | A weak CRC32 of the 496 bytes of the allocation table data
|===

=== The 64-bit allocation table

The 64-bit allocation is 512 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 496 | | The allocation table data +
Each bit represents a certain number of bytes (block). A value of 1 means that the block is allocated, 0 if not
4+| _Footer 16 bytes of size_
| 496 | 1 | 0x83 +
0x84 | Page type +
See section: <<page_types,Page types>> and <<allocation_table_types,Allocation table types>>
| 497 | 1 | 0x83 +
0x84 | Copy of page type
| 498 | 2 | | Signature +
According to `[MS-PST]` this should be empty
| 500 | 4 | | A weak CRC32 of the 496 bytes of the allocation table data
| 504 | 8 | | The back pointer +
The value contains the allocation table offset
|===

=== The 64-bit 4k page allocation table

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4072 | | The allocation table data +
Each bit represents a certain number of bytes (block). A value of 1 means that the block is allocated, 0 if not
4+| _Footer 24 bytes of size_
| 4072 | 1 | [yellow-background]*0x83* +
0x84 | Page type +
See section: <<page_types,Page types>> and <<allocation_table_types,Allocation table types>>
| 4073 | 1 | [yellow-background]*0x83* +
0x84 | Copy of page type
| 4074 | 2 | | Signature
| 4076 | 4 | | A weak CRC32 of the first 4072 bytes of the allocation table data
| 4080 | 8 | | Back pointer +
The value contains the allocation table offset
| 4088 | 8 | | [yellow-background]*Unknown*
|===

=== [[allocation_table_types]]Allocation table types

For both the 32-bit ANSI format and the 64-bit Unicode format the behavior of
the allocation tables is as following:

* The allocation table at offset 0x4400 with page type 0x84 addresses 64 byte blocks. Where the first bit in the allocation table data refers to offset 0x4400. These are used for the data allocation. The tables repeat themselves every 496 x 8 x 64 = 253952 bytes.
* The allocation table at offset 0x4600 with page type 0x83 addresses 512 byte blocks. Where the first bit in the allocation table data refers to offset 0x4400. These are used for the page allocation. The tables repeat themselves every 496 x 8 x 512 = 2031616 bytes.

For the 64-bit Unicode format with 4k (4096 bytes) pages format the allocation
tables is as following:

* The allocation table at offset 0x22000 with page type 0x84 addresses 64 byte blocks. Where the first bit in the allocation table data refers to offset 0x22000. These are used for the data allocation. The tables repeat themselves every 4072 x 8 x 512 = 16678912 bytes.

[NOTE]
Page type 0x83 not yet been seen to be used with the 64-bit Unicode format with 4k format.

== The index b-tree

The PFF consists of multiple index b-trees.

* The (file) offset index b-tree (Block B-Tree (BBT))
* The (item) descriptor index b-tree (Node B-Tree (NBT))

These b-trees have a similar basic structure.

An index b-tree consists of:

* branch nodes that point to branch or leaf nodes
* leaf nodes that contain the index data

=== The 32-bit index b-tree node

Both the 32-bit branch and leaf node have a similar structure which is 512
bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 496 | | Node entries +
(number of records x entry size) +
Maximum of 496 the remaining values are zeroed
4+| _Footer 16 bytes of size_
| 496 | 1 | | The number of entries +
The number of entries that are used
| 497 | 1 | | The maximum number of entries
| 498 | 1 | | The size of an entry
| 499 | 1 | | Node level +
A zero value represents a leaf node +
A value greater than zero branch nodes with the highest level representing the root
| 500 | 1 | 0x80 +
0x81 | Page type +
See section: <<page_types,Page types>>
| 501 | 1 | 0x80 +
0x81 | Copy of page type
| 502 | 2 | | Signature
| 504 | 4 | | Back pointer +
must match the back pointer that pointed to this node
| 508 | 4 | | A weak CRC32 of the first 500 bytes of the index node
|===

==== The 32-bit index b-tree branch node entry

The 32-bit index b-tree node entry is used in branch nodes. It is 12 bytes of
size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | The index identifier of the first child node +
Identifier of type node identifier +
See section: <<index_identifier,Index identifier>>
| 4 | 4 | | The back pointer
| 8 | 4 | | The (file) offset
|===

The index b-tree node will contain the following values:

* The maximum number of entries: 41
* The size of an entry: 12

An index b-tree node can contain the same identifier value as a (file) offset
index entry. This occurs when the leaf node is the lowest identifier in the
branch node.

==== The 32-bit (file) offset index entry

The 32-bit (file) offset index entry is used in leaf nodes. It is 12 bytes of
size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | The identifier +
Identifier of type block identifier
| 4 | 4 | | The (file) offset
| 8 | 2 | | The size
| 10 | 2 | | The reference count
|===

The index b-tree node will contain the following values:

* The maximum number of entries: 41
* The size of an entry: 12

The first LSB of the identifier is reserved.

The second LSB of the identifier is used to indicate if the block is internal or not.

* 0 = is not internal (external)
* 1 = is internal (used for array and local descriptors)

In an encrypted PFF the internal flag also indicates if the corresponding entry
is encrypted or not. See section: <<block_types,Block types>> for more information.

When the index tree is searched make sure to clear the first LSB in the
identifier.

==== The 32-bit descriptor index b-tree leaf node entry

The 32-bit descriptor index b-tree leaf node entry is 16 bytes of size and
consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | The (descriptor) index identifier +
Identifier of type node identifier +
See section: <<index_identifier,Index identifier>>
| 4 | 4 | | The (file) offset index identifier of the data
| 8 | 4 | | The (file) offset index identifier of the local descriptors
| 12 | 4 | | The parent (descriptor) index identifier
|===

The index b-tree node will contain the following values:

* The maximum number of entries: 31
* The size of an entry: 16

=== The 64-bit index b-tree node

Both the 64-bit branch and leaf node have a similar structure which is 512
bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 488 | | Node entries +
(number of records x entry size) +
Maximum of 488 the remaining values are zeroed
4+| _Footer 24 bytes of size_
| 488 | 1 | | The number of entries +
The number of entries that are used
| 489 | 1 | | The maximum number of entries
| 490 | 1 | | The size of an entry
| 491 | 1 | | Node level +
A zero value represents a leaf node +
A value greater than zero branch nodes with the highest level representing the root
| 492 | 4 | | [yellow-background]*Unknown (Padding)*
| 496 | 1 | 0x80 +
0x81 | Page type
See section: <<page_types,Page types>>
| 497 | 1 | 0x80 +
0x81 | Copy of page type
| 498 | 2 | | Signature
| 500 | 4 | | A weak CRC32 of the first 496 bytes of the index node
| 504 | 8 | | Back pointer +
must match the back pointer that pointed to this node
|===

==== The 64-bit index b-tree branch node entry

The 64-bit index b-tree node entry is used in branch nodes. It is 24 bytes of
size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | The index identifier of the first child node +
Identifier of type node identifier, only 32-bit are used +
See section: <<index_identifier,Index identifier>>
| 8 | 8 | | The back pointer
| 16 | 8 | | The (file) offset
|===

The index b-tree node will contain the following values:

* The maximum number of entries: 20
* The size of an entry: 24

An index b-tree node can contain the same identifier value as a (file) offset
index entry. This occurs when the leaf node is the lowest identifier in the
branch node.

==== The 64-bit (file) offset index entry

The 64-bit (file) offset index entry is used in leaf nodes. It is 24 bytes of
size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | The index identifier +
Identifier of type block identifier
| 8 | 8 | | The (file) offset
| 16 | 2 | | The size
| 18 | 2 | | The reference count
| 20 | 4 | | File offset of the data allocation table
|===

The index b-tree node will contain the following values:

* The maximum number of entries: 20
* The size of an entry: 24

The first LSB of the identifier is reserved.

The second LSB of the identifier is used to indicate if the block is internal
or not.

* 0 = is not internal (external)
* 1 = is internal (used for array and local descriptors)

In an encrypted PFF the internal flag also indicates if the corresponding entry
is encrypted or not. See section: 7.4 Block type for more information.

When the index tree is searched make sure to clear the first LSB in the
identifier.

==== The 64-bit descriptor index b-tree leaf node entry

The 64-bit descriptor index b-tree leaf node entry is 32 bytes of size and
consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | The (descriptor) index identifier +
Identifier of type node identifier, only 32-bit are used +
See section: <<index_identifier,Index identifier>>
| 8 | 8 | | The (file) offset index identifier of the data
| 16 | 8 | | The (file) offset index identifier of the local descriptors
| 24 | 4 | | The parent (descriptor) index identifier
| 28 | 4 | | [yellow-background]*Unknown* +
[yellow-background]*This value mainly contains 2, unless when both the data and local descriptor are empty.*
|===

The index b-tree node will contain the following values:

* The maximum number of entries: 15
* The size of an entry: 32

=== The 64-bit 4k page index b-tree node

In Outlook 2013, at least for OST files, a 4k (4096 bytes) page version of the
64-bit index b-tree node was introduced.

Both the 64-bit branch and leaf node have a similar structure which is 4096
bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4056 | | Node entries +
(number of records x entry size) +
Maximum of 488 the remaining values are zeroed
4+| _Footer 40 bytes of size_
| 4056 | 2 | | The number of entries +
The number of entries that are used
| 4058 | 2 | | The maximum number of entries
| 4060 | 1 | | The size of an entry
| 4061 | 1 | | Node level +
A zero value represents a leaf node +
A value greater than zero branch nodes with the highest level representing the root
| 4062 | 10 | | [yellow-background]*Unknown (Padding)*
| 4072 | 1 | 0x80 +
0x81 | Page type +
See section: <<page_types,Page types>>
| 4073 | 1 | 0x80 +
0x81 | Copy of page type
| 4074 | 2 | | Signature
| 4076 | 4 | | A weak CRC32 of the first 4072 bytes of the index node
| 4080 | 8 | | Back pointer +
must match the back pointer that pointed to this node
| 4088 | 8 | | [yellow-background]*Unknown*
|===

The node entry structures are the same as those of the 64-bit index b-tree node
(512 byte page) version.

=== [[index_identifier]]Index identifier

The index identifier is 32-bit of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0.0  | 5 bits | | Identifier type +
See section: <<node_identifier_types,Node identifier types>>
| 0.5 | 27 bits | | Identifier value
|===

[NOTE]
The identifiers should be unique and are so for allocated descriptors. However
unallocated descriptors can have identifiers that are in use.

==== [[node_identifier_types]]Node identifier types

The node identifier is used in both the item descriptor identifier and the
table value reference. It signifies the type of node the identifier is
referencing.

[yellow-background]*TODO: migrate remainder of documentation*

== The free map

[yellow-background]*TODO: migrate remainder of documentation*

== The density list

[yellow-background]*TODO: migrate remainder of documentation*

== Blocks

[yellow-background]*TODO: migrate remainder of documentation*

=== [[block_types]]Block types

[yellow-background]*TODO: migrate remainder of documentation*

== [[array]]The array

[yellow-background]*TODO: migrate remainder of documentation*

== [[local_descriptors]]The local descriptors

[yellow-background]*TODO: migrate remainder of documentation*

:numbered!:
[appendix]
== References

`[SMITH02]`

[cols="1,5",options="header"]
|===
| Title: | outlook.pst -- format of MS Outlook .pst file
| Author(s): | David Smith, Joe Nahmias, Brad Hards, Carl Byington
| URL: | http://hg.file-ten-sg.com/libpst/
|===

`[LIBESEDB]`

[cols="1,5",options="header"]
|===
| Title: | Extensible Storage Engine (ESE) Database File (EDB) format
| Author(s): | Joachim Metz
| URL: | https://github.com/libyal/libesedb/blob/master/documentation/Extensible%20Storage%20Engine%20(ESE)%20Database%20File%20(EDB)%20format.asciidoc
|===

`[LIBFMAPI]`

[cols="1,5",options="header"]
|===
| Title: | Message API (MAPI) definitions
| Auhtor: | Joachim Metz
| URL: | https://github.com/libyal/libfmapi/blob/master/documentation/MAPI%20definitions.pdf
|===

`[MSDN]`

[cols="1,5",options="header"]
|===
| Title: | Microsoft Developer Network
| URL: | http://msdn.microsoft.com/
|===

`[MS-PST]`

[cols="1,5",options="header"]
|===
| Title: | [MS-PST] Outlook Personal Folders File Format (.pst) structure specification
| URL: | http://msdn.microsoft.com/
|===

`[MACBINARY]`

[cols="1,5",options="header"]
|===
| Title: | Macintosh Binary Transfer Format (“MacBinary”) Standard Proposal
|===

[cols="1,5",options="header"]
|===
| Title: | Macintosh Binary Transfer Format (“MacBinary II”) Standard Proposal
|===

[cols="1,5",options="header"]
|===
| Title: | Macintosh Binary Transfer Format (“MacBinary III”) Standard Proposal
|===

`[OPENCHANGE]`

[cols="1,5",options="header"]
|===
| Title: | Openchange MAPI library
| URL: | http://www.openchange.org/index.php
|===

`[RFC1950]`

[cols="1,5",options="header"]
|===
| Title: | ZLIB Compressed Data Format Specification
| Version: | 3.3
| Author(s): | P. Deutsch, J-L. Gailly
| Date: | May 1996
| URL: | http://www.ietf.org/rfc/rfc1950.txt
|===

`[RFC1951]`

[cols="1,5",options="header"]
|===
| Title: | DEFLATE Compressed Data Format Specification
| Version: | 1.3
| Author(s): | P. Deutsch
| Date: | May 1996
| URL: | http://www.ietf.org/rfc/rfc1951.txt
|===

`[ROTHMAN99]`

[cols="1,5",options="header"]
|===
| Title: | The Compressed RTF Format
| Author(s): | Amichai Rothman
| URL: | http://www.freeutils.net/source/jtnef/rtfcompressed.jsp
|===

[appendix]
== GNU Free Documentation License
Version 1.3, 3 November 2008
Copyright © 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
<http://fsf.org/>

Everyone is permitted to copy and distribute verbatim copies of this license
document, but changing it is not allowed.

=== 0. PREAMBLE
The purpose of this License is to make a manual, textbook, or other functional
and useful document "free" in the sense of freedom: to assure everyone the
effective freedom to copy and redistribute it, with or without modifying it,
either commercially or noncommercially. Secondarily, this License preserves for
the author and publisher a way to get credit for their work, while not being
considered responsible for modifications made by others.

This License is a kind of "copyleft", which means that derivative works of the
document must themselves be free in the same sense. It complements the GNU
General Public License, which is a copyleft license designed for free software.

We have designed this License in order to use it for manuals for free software,
because free software needs free documentation: a free program should come with
manuals providing the same freedoms that the software does. But this License is
not limited to software manuals; it can be used for any textual work,
regardless of subject matter or whether it is published as a printed book. We
recommend this License principally for works whose purpose is instruction or
reference.

=== 1. APPLICABILITY AND DEFINITIONS
This License applies to any manual or other work, in any medium, that contains
a notice placed by the copyright holder saying it can be distributed under the
terms of this License. Such a notice grants a world-wide, royalty-free license,
unlimited in duration, to use that work under the conditions stated herein. The
"Document", below, refers to any such manual or work. Any member of the public
is a licensee, and is addressed as "you". You accept the license if you copy,
modify or distribute the work in a way requiring permission under copyright law.

A "Modified Version" of the Document means any work containing the Document or
a portion of it, either copied verbatim, or with modifications and/or
translated into another language.

A "Secondary Section" is a named appendix or a front-matter section of the
Document that deals exclusively with the relationship of the publishers or
authors of the Document to the Document's overall subject (or to related
matters) and contains nothing that could fall directly within that overall
subject. (Thus, if the Document is in part a textbook of mathematics, a
Secondary Section may not explain any mathematics.) The relationship could be a
matter of historical connection with the subject or with related matters, or of
legal, commercial, philosophical, ethical or political position regarding them.

The "Invariant Sections" are certain Secondary Sections whose titles are
designated, as being those of Invariant Sections, in the notice that says that
the Document is released under this License. If a section does not fit the
above definition of Secondary then it is not allowed to be designated as
Invariant. The Document may contain zero Invariant Sections. If the Document
does not identify any Invariant Sections then there are none.

The "Cover Texts" are certain short passages of text that are listed, as
Front-Cover Texts or Back-Cover Texts, in the notice that says that the
Document is released under this License. A Front-Cover Text may be at most 5
words, and a Back-Cover Text may be at most 25 words.

A "Transparent" copy of the Document means a machine-readable copy, represented
in a format whose specification is available to the general public, that is
suitable for revising the document straightforwardly with generic text editors
or (for images composed of pixels) generic paint programs or (for drawings)
some widely available drawing editor, and that is suitable for input to text
formatters or for automatic translation to a variety of formats suitable for
input to text formatters. A copy made in an otherwise Transparent file format
whose markup, or absence of markup, has been arranged to thwart or discourage
subsequent modification by readers is not Transparent. An image format is not
Transparent if used for any substantial amount of text. A copy that is not
"Transparent" is called "Opaque".

Examples of suitable formats for Transparent copies include plain ASCII without
markup, Texinfo input format, LaTeX input format, SGML or XML using a publicly
available DTD, and standard-conforming simple HTML, PostScript or PDF designed
for human modification. Examples of transparent image formats include PNG, XCF
and JPG. Opaque formats include proprietary formats that can be read and edited
only by proprietary word processors, SGML or XML for which the DTD and/or
processing tools are not generally available, and the machine-generated HTML,
PostScript or PDF produced by some word processors for output purposes only.

The "Title Page" means, for a printed book, the title page itself, plus such
following pages as are needed to hold, legibly, the material this License
requires to appear in the title page. For works in formats which do not have
any title page as such, "Title Page" means the text near the most prominent
appearance of the work's title, preceding the beginning of the body of the text.

The "publisher" means any person or entity that distributes copies of the
Document to the public.

A section "Entitled XYZ" means a named subunit of the Document whose title
either is precisely XYZ or contains XYZ in parentheses following text that
translates XYZ in another language. (Here XYZ stands for a specific section
name mentioned below, such as "Acknowledgements", "Dedications",
"Endorsements", or "History".) To "Preserve the Title" of such a section when
you modify the Document means that it remains a section "Entitled XYZ"
according to this definition.

The Document may include Warranty Disclaimers next to the notice which states
that this License applies to the Document. These Warranty Disclaimers are
considered to be included by reference in this License, but only as regards
disclaiming warranties: any other implication that these Warranty Disclaimers
may have is void and has no effect on the meaning of this License.

=== 2. VERBATIM COPYING
You may copy and distribute the Document in any medium, either commercially or
noncommercially, provided that this License, the copyright notices, and the
license notice saying this License applies to the Document are reproduced in
all copies, and that you add no other conditions whatsoever to those of this
License. You may not use technical measures to obstruct or control the reading
or further copying of the copies you make or distribute. However, you may
accept compensation in exchange for copies. If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and you may
publicly display copies.

=== 3. COPYING IN QUANTITY
If you publish printed copies (or copies in media that commonly have printed
covers) of the Document, numbering more than 100, and the Document's license
notice requires Cover Texts, you must enclose the copies in covers that carry,
clearly and legibly, all these Cover Texts: Front-Cover Texts on the front
cover, and Back-Cover Texts on the back cover. Both covers must also clearly
and legibly identify you as the publisher of these copies. The front cover must
present the full title with all words of the title equally prominent and
visible. You may add other material on the covers in addition. Copying with
changes limited to the covers, as long as they preserve the title of the
Document and satisfy these conditions, can be treated as verbatim copying in
other respects.

If the required texts for either cover are too voluminous to fit legibly, you
should put the first ones listed (as many as fit reasonably) on the actual
cover, and continue the rest onto adjacent pages.

If you publish or distribute Opaque copies of the Document numbering more than
100, you must either include a machine-readable Transparent copy along with
each Opaque copy, or state in or with each Opaque copy a computer-network
location from which the general network-using public has access to download
using public-standard network protocols a complete Transparent copy of the
Document, free of added material. If you use the latter option, you must take
reasonably prudent steps, when you begin distribution of Opaque copies in
quantity, to ensure that this Transparent copy will remain thus accessible at
the stated location until at least one year after the last time you distribute
an Opaque copy (directly or through your agents or retailers) of that edition
to the public.

It is requested, but not required, that you contact the authors of the Document
well before redistributing any large number of copies, to give them a chance to
provide you with an updated version of the Document.

=== 4. MODIFICATIONS
You may copy and distribute a Modified Version of the Document under the
conditions of sections 2 and 3 above, provided that you release the Modified
Version under precisely this License, with the Modified Version filling the
role of the Document, thus licensing distribution and modification of the
Modified Version to whoever possesses a copy of it. In addition, you must do
these things in the Modified Version:

A. Use in the Title Page (and on the covers, if any) a title distinct from that
of the Document, and from those of previous versions (which should, if there
were any, be listed in the History section of the Document). You may use the
same title as a previous version if the original publisher of that version
gives permission.

B. List on the Title Page, as authors, one or more persons or entities
responsible for authorship of the modifications in the Modified Version,
together with at least five of the principal authors of the Document (all of
its principal authors, if it has fewer than five), unless they release you from
this requirement.

C. State on the Title page the name of the publisher of the Modified Version,
as the publisher.

D. Preserve all the copyright notices of the Document.

E. Add an appropriate copyright notice for your modifications adjacent to the
other copyright notices.

F. Include, immediately after the copyright notices, a license notice giving
the public permission to use the Modified Version under the terms of this
License, in the form shown in the Addendum below.

G. Preserve in that license notice the full lists of Invariant Sections and
required Cover Texts given in the Document's license notice.

H. Include an unaltered copy of this License.

I. Preserve the section Entitled "History", Preserve its Title, and add to it
an item stating at least the title, year, new authors, and publisher of the
Modified Version as given on the Title Page. If there is no section Entitled
"History" in the Document, create one stating the title, year, authors, and
publisher of the Document as given on its Title Page, then add an item
describing the Modified Version as stated in the previous sentence.

J. Preserve the network location, if any, given in the Document for public
access to a Transparent copy of the Document, and likewise the network
locations given in the Document for previous versions it was based on. These
may be placed in the "History" section. You may omit a network location for a
work that was published at least four years before the Document itself, or if
the original publisher of the version it refers to gives permission.

K. For any section Entitled "Acknowledgements" or "Dedications", Preserve the
Title of the section, and preserve in the section all the substance and tone of
each of the contributor acknowledgements and/or dedications given therein.

L. Preserve all the Invariant Sections of the Document, unaltered in their text
and in their titles. Section numbers or the equivalent are not considered part
of the section titles.

M. Delete any section Entitled "Endorsements". Such a section may not be
included in the Modified Version.

N. Do not retitle any existing section to be Entitled "Endorsements" or to
conflict in title with any Invariant Section.

O. Preserve any Warranty Disclaimers.

If the Modified Version includes new front-matter sections or appendices that
qualify as Secondary Sections and contain no material copied from the Document,
you may at your option designate some or all of these sections as invariant. To
do this, add their titles to the list of Invariant Sections in the Modified
Version's license notice. These titles must be distinct from any other section
titles.

You may add a section Entitled "Endorsements", provided it contains nothing but
endorsements of your Modified Version by various parties—for example,
statements of peer review or that the text has been approved by an organization
as the authoritative definition of a standard.

You may add a passage of up to five words as a Front-Cover Text, and a passage
of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts
in the Modified Version. Only one passage of Front-Cover Text and one of
Back-Cover Text may be added by (or through arrangements made by) any one
entity. If the Document already includes a cover text for the same cover,
previously added by you or by arrangement made by the same entity you are
acting on behalf of, you may not add another; but you may replace the old one,
on explicit permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License give
permission to use their names for publicity for or to assert or imply
endorsement of any Modified Version.

=== 5. COMBINING DOCUMENTS
You may combine the Document with other documents released under this License,
under the terms defined in section 4 above for modified versions, provided that
you include in the combination all of the Invariant Sections of all of the
original documents, unmodified, and list them all as Invariant Sections of your
combined work in its license notice, and that you preserve all their Warranty
Disclaimers.

The combined work need only contain one copy of this License, and multiple
identical Invariant Sections may be replaced with a single copy. If there are
multiple Invariant Sections with the same name but different contents, make the
title of each such section unique by adding at the end of it, in parentheses,
the name of the original author or publisher of that section if known, or else
a unique number. Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections Entitled "History" in the
various original documents, forming one section Entitled "History"; likewise
combine any sections Entitled "Acknowledgements", and any sections Entitled
"Dedications". You must delete all sections Entitled "Endorsements".

=== 6. COLLECTIONS OF DOCUMENTS
You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this License
in the various documents with a single copy that is included in the collection,
provided that you follow the rules of this License for verbatim copying of each
of the documents in all other respects.

You may extract a single document from such a collection, and distribute it
individually under this License, provided you insert a copy of this License
into the extracted document, and follow this License in all other respects
regarding verbatim copying of that document.

=== 7. AGGREGATION WITH INDEPENDENT WORKS
A compilation of the Document or its derivatives with other separate and
independent documents or works, in or on a volume of a storage or distribution
medium, is called an "aggregate" if the copyright resulting from the
compilation is not used to limit the legal rights of the compilation's users
beyond what the individual works permit. When the Document is included in an
aggregate, this License does not apply to the other works in the aggregate
which are not themselves derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these copies of the
Document, then if the Document is less than one half of the entire aggregate,
the Document's Cover Texts may be placed on covers that bracket the Document
within the aggregate, or the electronic equivalent of covers if the Document is
in electronic form. Otherwise they must appear on printed covers that bracket
the whole aggregate.

=== 8. TRANSLATION
Translation is considered a kind of modification, so you may distribute
translations of the Document under the terms of section 4. Replacing Invariant
Sections with translations requires special permission from their copyright
holders, but you may include translations of some or all Invariant Sections in
addition to the original versions of these Invariant Sections. You may include
a translation of this License, and all the license notices in the Document, and
any Warranty Disclaimers, provided that you also include the original English
version of this License and the original versions of those notices and
disclaimers. In case of a disagreement between the translation and the original
version of this License or a notice or disclaimer, the original version will
prevail.

If a section in the Document is Entitled "Acknowledgements", "Dedications", or
"History", the requirement (section 4) to Preserve its Title (section 1) will
typically require changing the actual title.

=== 9. TERMINATION
You may not copy, modify, sublicense, or distribute the Document except as
expressly provided under this License. Any attempt otherwise to copy, modify,
sublicense, or distribute it is void, and will automatically terminate your
rights under this License.

However, if you cease all violation of this License, then your license from a
particular copyright holder is reinstated (a) provisionally, unless and until
the copyright holder explicitly and finally terminates your license, and (b)
permanently, if the copyright holder fails to notify you of the violation by
some reasonable means prior to 60 days after the cessation.

Moreover, your license from a particular copyright holder is reinstated
permanently if the copyright holder notifies you of the violation by some
reasonable means, this is the first time you have received notice of violation
of this License (for any work) from that copyright holder, and you cure the
violation prior to 30 days after your receipt of the notice.

Termination of your rights under this section does not terminate the licenses
of parties who have received copies or rights from you under this License. If
your rights have been terminated and not permanently reinstated, receipt of a
copy of some or all of the same material does not give you any rights to use it.

=== 10. FUTURE REVISIONS OF THIS LICENSE
The Free Software Foundation may publish new, revised versions of the GNU Free
Documentation License from time to time. Such new versions will be similar in
spirit to the present version, but may differ in detail to address new problems
or concerns. See http://www.gnu.org/copyleft/.

Each version of the License is given a distinguishing version number. If the
Document specifies that a particular numbered version of this License "or any
later version" applies to it, you have the option of following the terms and
conditions either of that specified version or of any later version that has
been published (not as a draft) by the Free Software Foundation. If the
Document does not specify a version number of this License, you may choose any
version ever published (not as a draft) by the Free Software Foundation. If the
Document specifies that a proxy can decide which future versions of this
License can be used, that proxy's public statement of acceptance of a version
permanently authorizes you to choose that version for the Document.

=== 11. RELICENSING
"Massive Multiauthor Collaboration Site" (or "MMC Site") means any World Wide
Web server that publishes copyrightable works and also provides prominent
facilities for anybody to edit those works. A public wiki that anybody can edit
is an example of such a server. A "Massive Multiauthor Collaboration" (or
"MMC") contained in the site means any set of copyrightable works thus
published on the MMC site.

"CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0 license
published by Creative Commons Corporation, a not-for-profit corporation with a
principal place of business in San Francisco, California, as well as future
copyleft versions of that license published by that same organization.

"Incorporate" means to publish or republish a Document, in whole or in part, as
part of another Document.

An MMC is "eligible for relicensing" if it is licensed under this License, and
if all works that were first published under this License somewhere other than
this MMC, and subsequently incorporated in whole or in part into the MMC, (1)
had no cover texts or invariant sections, and (2) were thus incorporated prior
to November 1, 2008.

The operator of an MMC Site may republish an MMC contained in the site under
CC-BY-SA on the same site at any time before August 1, 2009, provided the MMC
is eligible for relicensing.

